generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Organization {
  id                    Int       @id @default(autoincrement())
  name                  String    @unique
  slug                  String    @unique
  address               String?
  organizationDocument  OrganizationDocument?  @relation(fields: [organizationDocumentId], references: [id])
  organizationDocumentId Int?     @unique
  organizationStatus    StatusOrganization
  organizationType      TypeOrganization
  createdAt             DateTime
  updatedAt             DateTime
  owner                 User      ?     @relation(name: "Owner", fields: [ownerId], references: [id])
  ownerId               Int?
  users                 User[]
  poses                 Pos[]
  organizationMailConfirms OrganizationMailConfirm[]
  DeviceApiKey          DeviceApiKey[]
  nomenclatures          Nomenclature[]
}

model Address {
  id           Int           @id @default(autoincrement())
  city         String
  location     String
  pos          Pos?
  lat          Int?
  lon          Int?
}

model OrganizationDocument {
  id                    Int       @id @default(autoincrement())
  organization          Organization?
  rateVat               String
  inn                   String
  okpo                  String
  kpp                   String?
  ogrn                  String
  bik                   String
  correspondentAccount  String
  bank                  String
  settlementAccount     String
  addressBank           String
  documentDoc           String?
  certificateNumber     String?
  dateCertificate       DateTime?
}

model OrganizationMailConfirm {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  organization Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  confirmString String
  createdAt     DateTime
  expireAt      DateTime
}

model User {
  id                Int            @id @default(autoincrement())
  userRole          UserRole       @relation(fields: [userRoleId], references: [id])
  userRoleId        Int
  name              String
  surname           String?
  middlename        String?
  birthday          DateTime
  phone             String
  email             String         @unique
  password          String
  gender            String?
  position          PositionUser?  @default(Operator)
  status            StatusUser?    @default(ACTIVE)
  avatar            String?
  country           String?
  countryCode       Int?
  timezone          Int?
  refreshTokenId    String?
  receiveNotifications  Int?  @default(1)
  createdAt         DateTime?
  updatedAt         DateTime?
  organizationOwner Organization[] @relation(name: "Owner")
  organizations     Organization[]
  posesCreated      Pos[]          @relation(name: "CreatedByUser")
  posesUpdated      Pos[]          @relation(name: "UpdateByUser")
  posesPermissions  Pos[]
  techTaskExecutor  TechTask[]     @relation(name: "Executor")
  techTaskCreated   TechTask[]     @relation(name: "CreatedByUser")
  techTaskUpdated   TechTask[]     @relation(name: "UpdateByUser")
  incidentWorker    Incident[]     @relation(name: "Worker")
  incidentsCreated  Incident[]     @relation(name: "CreatedByUser")
  incidentsUpdated  Incident[]     @relation(name: "UpdateByUser")
  warehouseManager  Warehouse[]    @relation(name: "Manager")
  warehouseCreated  Warehouse[]     @relation(name: "CreatedByUser")
  warehouseUpdated  Warehouse[]     @relation(name: "UpdateByUser")
  nomenclatureCreated Nomenclature[]  @relation(name: "CreatedByUser")
  nomenclatureUpdated  Nomenclature[]     @relation(name: "UpdateByUser")
  warehouseDocumentResponsible WarehouseDocument[]  @relation(name: "responsibleUser")
  warehouseDocumentCreated WarehouseDocument[]  @relation(name: "CreatedByUser")
  warehouseDocumentUpdated WarehouseDocument[]  @relation(name: "UpdateByUser")
  cashCollectionCreated CashCollection[]  @relation(name: "CreatedByUser")
  cashCollectionUpdated CashCollection[]  @relation(name: "UpdateByUser")
}

model UserMailConfirm {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  confirmString String
  createdAt     DateTime
  expireAt      DateTime
}

model UserRole {
  id              Int              @id @default(autoincrement())
  name            String
  users           User[]
  userPermissions UserPermission[]
}

model UserPermission {
  id        Int              @id @default(autoincrement())
  action    PermissionAction
  object    ObjectPermissions?     @relation(fields: [objectId], references: [id])
  objectId  Int
  userRoles UserRole[]
}

model DevicePermissions {
  id         Int              @id @default(autoincrement())
  action     PermissionAction
  object     ObjectPermissions?   @relation(fields: [objectId], references: [id])
  objectId   Int?
  DeviceRole DeviceRole[]
}

model DeviceRole {
  id                Int                 @id @default(autoincrement())
  name              String
  carWashDevice     CarWashDevice[]
  devicePermissions DevicePermissions[]
}

model ObjectPermissions {
  id                      Int                      @id @default(autoincrement())
  name                    String
  userPermissions         UserPermission[]
  platformUserPermissions PlatformUserPermission[]
  devicePermissions       DevicePermissions[]
}


model Pos {
  id                   Int                   @id @default(autoincrement())
  loyaltyProgram       LoyaltyProgram?        @relation(fields: [loyaltyProgramId], references: [id])
  loyaltyProgramId     Int?
  name                 String
  slug                 String
  monthlyPlan          Int?
  timeWork             String                @default("24")
  organization         Organization          @relation(fields: [organizationId], references: [id])
  organizationId       Int
  posMetaData          String?
  timezone             Int
  address              Address?              @relation(fields: [addressId], references: [id])
  addressId            Int?                   @unique
  image                String?
  rating               Int?
  status               StatusPos            @default(VERIFICATE)
  createdAt            DateTime
  updatedAt            DateTime
  createdBy            User                  @relation(name: "CreatedByUser", fields: [createdById], references: [id])
  createdById          Int
  updateBy             User                  @relation(name: "UpdateByUser", fields: [updateById], references: [id])
  updateById           Int
  posBenefit           PosBenefit?
  loyaltyPosPromocodes LoyaltyPosPromocode[]
  carWashPos           CarWashPos?
  usersPermissions     User[]
  techTasks            TechTask[]
  equipmentKnots       EquipmentKnot[]
  incident             Incident[]
  warehouse            Warehouse[]
  cashCollection       CashCollection[]
}

model CarWashPos {
  id              Int              @id @default(autoincrement())
  name            String
  slug            String
  pos             Pos              @relation(fields: [posId], references: [id])
  posId           Int              @unique
  carWashPosType  CarWashPosType   @default(SelfService)
  minSumOrder     Int              @default(50)
  maxSumOrder     Int              @default(500)
  stepSumOrder    Int              @default(10)
  carWashServices CarWashService[]
  carWashDevices  CarWashDevice[]
  currencyCarWashPoses          CurrencyCarWashPos[]
  programTechRates              ProgramTechRate[]
  carWashDeviceProgramTypes            CarWashDeviceProgramsType[]
}

model CarWashService {
  id          Int          @id @default(autoincrement())
  name        String
  code        String
  description String
  carWasPoses CarWashPos[]
}

model CarWashDevice {
  id                            Int                            @id @default(autoincrement())
  name                          String
  carWashDeviceMetaData         String
  status                        String
  ipAddress                     String
  carWashDeviceType             CarWashDeviceType              @relation(fields: [carWashDeviceTypeId], references: [id])
  carWashDeviceTypeId           Int
  carWasPos                     CarWashPos                     @relation(fields: [carWashPosId], references: [id])
  carWashPosId                  Int
  carWashDeviceOperationsEvents CarWashDeviceOperationsEvent[]
  carWashDeviceOperationsCardEvents CarWashDeviceOperationsCardEvent[]
  carWashDeviceProgrammsEvents  CarWashDeviceProgramsEvent[]
  carWashDeviceEvents           CarWashDeviceEvent[]
  carWashDeviceServiceEvent     CarWashDeviceServiceEvent[]
  carWashDeviceMfuEvent         CarWashDeviceMfuEvent[]
  DeviceRole                    DeviceRole?                    @relation(fields: [deviceRoleId], references: [id])
  deviceRoleId                  Int?
  cashCollectionDevice          CashCollectionDevice[]
}

model CarWashDeviceType {
  id                          Int                          @id @default(autoincrement())
  name                        String
  code                        String
  carWashDevices              CarWashDevice[]
  carWashDeviceProgrammsTypes CarWashDeviceProgramsType[]
  currencyCarWashPoses        CurrencyCarWashPos[]
  cashCollectionDeviceTypes   CashCollectionDeviceType[]
}

model DeviceApiKey {
  id             Int          @id @default(autoincrement())
  key            String
  expiryAt       DateTime
  issuedAt       DateTime
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model CarWashDeviceOperationsEvent {
  id                           Int                           @id @default(autoincrement())
  carWashDevice                CarWashDevice?                @relation(fields: [carWashDeviceId], references: [id])
  carWashDeviceId              Int?
  operDate                     DateTime
  loadDate                     DateTime
  counter                      BigInt
  operSum                      Int
  confirm                      Int
  isAgregate                   Int
  localId                      Int
  currency                     Currency                      @relation(fields: [currencyId], references: [id])
  currencyId                   Int
  isBoxOffice                  Int
  errNum                       ErrNum?                       @relation(fields: [errNumId], references: [id])
  errNumId                     Int?
}

model CarWashDeviceOperationsCardEvent {
  id                           Int                           @id @default(autoincrement())
  carWashDevice                CarWashDevice?                @relation(fields: [carWashDeviceId], references: [id])
  carWashDeviceId              Int?
  operDate                     DateTime
  loadDate                     DateTime
  cardNumber                    String
  discount                     Int
  sum                          Int
  localId                      Int
  operId                       Int
  discountSum                  Int
  totalSum                     Int?
  isBonus                      Int?
  currency                     CurrencyType
  cashback                     Int?
  cashbackPercent              Int?
  errNum                       ErrNum?                       @relation(fields: [errNumId], references: [id])
  errNumId                     Int?
}

model CarWashDeviceProgramsEvent {
  id                             Int                          @id @default(autoincrement())
  carWashDevice                  CarWashDevice?                @relation(fields: [carWashDeviceId], references: [id])
  carWashDeviceId                Int?
  carWashDeviceProgramsType      CarWashDeviceProgramsType?   @relation(fields: [carWashDeviceProgramsTypeId], references: [id])
  carWashDeviceProgramsTypeId    Int?
  beginDate                      DateTime
  loadDate                       DateTime
  endDate                        DateTime
  confirm                        Int
  isPaid                         Int
  localId                        Int
  isAgregate                     Int?
  minute                         Decimal?
  errNum                         ErrNum?                       @relation(fields: [errNumId], references: [id])
  errNumId                       Int?
}

model CarWashDeviceProgramsType {
  id                           Int                           @id @default(autoincrement())
  carWashDeviceType            CarWashDeviceType             @relation(fields: [carWashDeviceTypeId], references: [id])
  carWashDeviceTypeId          Int
  name                         String
  code                         String?
  description                  String?
  orderNum                     Int?
  carWashDeviceProgrammsEvents CarWashDeviceProgramsEvent[]
  carWashDeviceServiceEvent     CarWashDeviceServiceEvent[]
  incident                      Incident[]
  programTechRates              ProgramTechRate[]
  carWashPoses                  CarWashPos[]
}

model CarWashDeviceEvent {
  id                       Int                    @id @default(autoincrement())
  carWashDevice            CarWashDevice?          @relation(fields: [carWashDeviceId], references: [id])
  carWashDeviceId          Int?
  carWashDeviceEventType   CarWashDeviceEventType? @relation(fields: [carWashDeviceEventTypeId], references: [id])
  carWashDeviceEventTypeId Int?
  eventDate                DateTime
  loadDate                 DateTime
  localId                  Int
  errNum                   ErrNum?                  @relation(fields: [errNumId], references: [id])
  errNumId                 Int?
}

model CarWashDeviceEventType {
  id                  Int                  @id @default(autoincrement())
  name                String
  carWashDeviceEvents CarWashDeviceEvent[]
}

model CarWashDeviceServiceEvent {
  id                       Int                    @id @default(autoincrement())
  carWashDevice            CarWashDevice?          @relation(fields: [carWashDeviceId], references: [id])
  carWashDeviceId          Int?
  carWashDeviceProgramsType      CarWashDeviceProgramsType?   @relation(fields: [carWashDeviceProgramsTypeId], references: [id])
  carWashDeviceProgramsTypeId    Int?
  beginDate                DateTime
  endDate                  DateTime
  loadDate                 DateTime
  localId                  Int
  counter                  BigInt
  errNum                   ErrNum?                  @relation(fields: [errNumId], references: [id])
  errNumId                 Int?
}

model CarWashDeviceMfuEvent {
  id                       Int                    @id @default(autoincrement())
  carWashDevice            CarWashDevice?          @relation(fields: [carWashDeviceId], references: [id])
  carWashDeviceId          Int?
  cashIn                   Int
  coinOut                  Int
  beginDate                DateTime
  endDate                  DateTime
  loadDate                 DateTime
  localId                  Int
  errNum                   ErrNum?                  @relation(fields: [errNumId], references: [id])
  errNumId                 Int?
}

model Currency {
  id                            Int                            @id @default(autoincrement())
  code                          String @unique
  name                          String @unique
  currencyType                  CurrencyType
  currencyView                  CurrencyView?
  currencyCarWashPoses          CurrencyCarWashPos[]
  carWashDeviceOperationsEvents CarWashDeviceOperationsEvent[]
}

model CurrencyCarWashPos {
  id                            Int                            @id @default(autoincrement())
  currency                      Currency                       @relation(fields: [currencyId], references: [id])
  currencyId                    Int
  carWashDeviceType             CarWashDeviceType              @relation(fields: [carWashDeviceTypeId], references: [id])
  carWashDeviceTypeId           Int
  coef                          Int
  carWashPos                    CarWashPos                     @relation(fields: [carWashPosId], references: [id])
  carWashPosId                  Int
}

model ErrNum {
  id                            Int                            @id @default(autoincrement())
  message                       String
  code                          String
  carWashDeviceOperationsEvents CarWashDeviceOperationsEvent[]
  carWashDeviceOperationsCardEvents CarWashDeviceOperationsCardEvent[]
  carWashDeviceProgramsEvents  CarWashDeviceProgramsEvent[]
  carWashDeviceEvents           CarWashDeviceEvent[]
  carWashDeviceServiceEvent     CarWashDeviceServiceEvent[]
  carWashDeviceMfuEvent         CarWashDeviceMfuEvent[]
}

model LoyaltyProgram {
  id               Int               @id @default(autoincrement())
  name             String
  poses            Pos[]
  loyaltyCardTiers LoyaltyCardTier[]
}

model PosBenefit {
  id           Int           @id @default(autoincrement())
  pos          Pos           @relation(fields: [posId], references: [id])
  posId        Int           @unique
  benefits     Benefit[]
  benefitTypes BenefitType[]
}

model LoyaltyPosPromocode {
  id                   Int                   @id @default(autoincrement())
  pos                  Pos                   @relation(fields: [posId], references: [id])
  posId                Int
  code                 Int
  promocodeTransaction PromocodeTransaction?
  metaData             String
  discount             Int
  discountType         String
  expiryDate           DateTime
  status               String
  createdAt            DateTime
  updatedAt            DateTime
}

model PromocodeTransaction {
  id                    Int                 @id @default(autoincrement())
  loyaltyPosPromocode   LoyaltyPosPromocode @relation(fields: [loyaltyPosPromocodeId], references: [id])
  loyaltyPosPromocodeId Int                 @unique
  mobileUser            MobileUser          @relation(fields: [mobileUserId], references: [id])
  mobileUserId          Int                 @unique
  activationDate        DateTime
  status                String
}

model Benefit {
  id                  Int               @id @default(autoincrement())
  benefitType         BenefitType       @relation(fields: [benefitTypeId], references: [id])
  benefitTypeId       Int
  name                String
  code                String
  bonus               String
  benefitActionType   BenefitActionType @relation(fields: [benefitActionTypeId], references: [id])
  benefitActionTypeId Int
  posBenefit          PosBenefit        @relation(fields: [posBenefitId], references: [id])
  posBenefitId        Int
  loyaltyCardTiers    LoyaltyCardTier[]
}

model BenefitType {
  id           Int        @id @default(autoincrement())
  benefites    Benefit[]
  name         String
  code         String
  bonus        String
  posBenefit   PosBenefit @relation(fields: [posBenefitId], references: [id])
  posBenefitId Int
}

model BenefitActionType {
  id          Int       @id @default(autoincrement())
  benefites   Benefit[]
  name        String
  description String
}

model LoyaltyCard {
  id                Int             @id @default(autoincrement())
  balance           Int
  statuc            String
  dateBegin         DateTime
  dateEnd           DateTime
  loyaltyCardTier   LoyaltyCardTier @relation(fields: [loyaltyCardTierId], references: [id])
  loyaltyCardTierId Int
  uncNumber         String
  note              String
  mobileUser        MobileUser?
}

model LoyaltyCardTier {
  id               Int            @id @default(autoincrement())
  name             String
  loyaltyCard      LoyaltyCard[]
  loyaltyProgram   LoyaltyProgram @relation(fields: [loyaltyProgramId], references: [id])
  loyaltyProgramId Int
  benefits         Benefit[]
}

model MobileUser {
  id                   Int                    @id @default(autoincrement())
  name                 String
  surname              String?
  middlename           String?
  birthday             DateTime?
  phone                String                 @unique
  email                String?                @unique
  gender               String?
  status               StatusUser?            @default(ACTIVE)
  avatar               String?
  country              String?
  countryCode          Int?
  timezone             Int?
  refreshTokenId       String?
  createdAt            DateTime?
  updatedAt            DateTime?
  loyaltyCard          LoyaltyCard?           @relation(fields: [loyaltyCardId], references: [id])
  loyaltyCardId        Int?                   @unique
  promocodeTransaction PromocodeTransaction[]
  mobileUserRole       MobileUserRole?        @relation(fields: [mobileUserRoleId], references: [id])
  mobileUserRoleId     Int?
}

model Otp {
  id          Int      @id @default(autoincrement())
  phone       String   @unique
  confirmCode String
  createdAt   DateTime
  expireAt    DateTime
}

model MobileUserRole {
  id                   Int                    @id @default(autoincrement())
  name                 String
  mobileUsers          MobileUser[]
  mobileUserPermission MobileUserPermission[]
}

model MobileUserPermission {
  id               Int              @id @default(autoincrement())
  name             String
  permissionModule String
  mobileUserRoles  MobileUserRole[]
}

model PlatformUser {
  id                 Int               @id @default(autoincrement())
  name               String
  surname            String
  middlename         String?
  birthday           DateTime?
  phone              String?           @unique
  email              String            @unique
  password           String
  gender             String
  status             StatusUser?       @default(ACTIVE)
  avatar             String?
  country            String
  countryCode        Int
  timezone           Int
  refreshTokenId     String?
  createdAt          DateTime
  updatedAt          DateTime
  platformUserRole   PlatformUserRole? @relation(fields: [platformUserRoleId], references: [id])
  platformUserRoleId Int?
}

model PlatformUserMailConfirm {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  confirmString String
  createdAt     DateTime
  expireAt      DateTime
}

model PlatformUserRole {
  id                      Int                      @id @default(autoincrement())
  name                    String
  platformUsers           PlatformUser[]
  platformUserPermissions PlatformUserPermission[]
}

model PlatformUserPermission {
  id                Int                  @id @default(autoincrement())
  action            PermissionAction
  object            ObjectPermissions? @relation(fields: [objectId], references: [id])
  objectId          Int
  platformUserRoles PlatformUserRole[]
}

model DeviceDataRaw {
  id                      Int                      @id @default(autoincrement())
  data                    String
  errors                  String?
  status                  StatusDeviceDataRaw
  version                 String
  createdAt               DateTime
  updatedAt               DateTime
  countRow                Int?
  countError              Int?
}

model TechTask {
  id                      Int                      @id @default(autoincrement())
  name                    String
  pos                     Pos?                      @relation(fields: [posId], references: [id])
  posId                   Int?
  type                    TypeTechTask
  status                  StatusTechTask
  period                  PeriodTechTask
  startDate               DateTime
  nextCreateDate          DateTime?
  startWorkDate           DateTime?
  sendWorkDate            DateTime?
  executor                User?                    @relation(name: "Executor", fields: [executorId], references: [id])
  executorId              Int?
  createdAt               DateTime
  updatedAt               DateTime
  createdBy               User                     @relation(name: "CreatedByUser", fields: [createdById], references: [id])
  createdById             Int
  updateBy                User                     @relation(name: "UpdateByUser", fields: [updateById], references: [id])
  updateById              Int
  techTaskItemValueToTechTasks       TechTaskItemValueToTechTask[]
}

enum TypeTechTask {
  Routine
  Regulation
}

enum StatusTechTask {
  ACTIVE
  FINISHED
  PAUSE
  OVERDUE
}

enum PeriodTechTask {
  Daily
  Weekly
  Monthly
}

model TechTaskItemTemplate {
  id                      Int                      @id @default(autoincrement())
  title                   String
  code                    String?
  type                    TypeTechTaskItemTemplate
  group                   GroupTechTaskItemTemplate
  techTaskItemValueToTechTasks       TechTaskItemValueToTechTask[]
}

enum TypeTechTaskItemTemplate {
  Text
  Number
  SelectList
  Checkbox
}

enum GroupTechTaskItemTemplate {
  Check
  PowerConsumption
  Installations
  Softener
  Osmosis
  CarbonFilter
  Chemistry
  Counters
}

model TechTaskItemValueToTechTask {
  id                      Int                      @id @default(autoincrement())
  techTask                TechTask                 @relation(fields: [techTaskId], references: [id])
  techTaskId              Int
  techTaskItemTemplate    TechTaskItemTemplate     @relation(fields: [techTaskItemTemplateId], references: [id])
  techTaskItemTemplateId  Int
  value                   String?
  image                   String?
}

model Incident {
  id                      Int                      @id @default(autoincrement())
  pos                     Pos?                      @relation(fields: [posId], references: [id])
  posId                   Int?
  worker                  User?                     @relation(name: "Worker", fields: [workerId], references: [id])
  workerId                Int?
  appearanceDate          DateTime
  startDate               DateTime
  finishDate              DateTime
  objectName              String
  equipmentKnot           EquipmentKnot?           @relation(fields: [equipmentKnotId], references: [id])
  equipmentKnotId         Int?
  incidentName               IncidentName?               @relation(fields: [incidentNameId], references: [id])
  incidentNameId              Int?
  incidentReason          IncidentInfo?           @relation(name: "Reason", fields: [incidentReasonId], references: [id])
  incidentReasonId        Int?
  incidentSolution        IncidentInfo?         @relation(name: "Solution", fields: [incidentSolutionId], references: [id])
  incidentSolutionId      Int?
  downtime                Int
  comment                 String
  carWashDeviceProgramsType      CarWashDeviceProgramsType?   @relation(fields: [carWashDeviceProgramsTypeId], references: [id])
  carWashDeviceProgramsTypeId    Int?
  createdAt               DateTime
  updatedAt               DateTime
  createdBy               User                  @relation(name: "CreatedByUser", fields: [createdById], references: [id])
  createdById             Int
  updateBy                User                  @relation(name: "UpdateByUser", fields: [updatedById], references: [id])
  updatedById             Int
}

model EquipmentKnot {
  id                      Int                      @id @default(autoincrement())
  name                    String
  pos                     Pos                      @relation(fields: [posId], references: [id])
  posId                   Int
  incidentName            IncidentName[]
  incident                Incident[]
}

model IncidentName {
  id                      Int                      @id @default(autoincrement())
  name                    String
  equipmentKnots          EquipmentKnot[]
  incident                Incident[]
  incidentReasons         IncidentInfo[]
}

model IncidentInfo {
  id                      Int                      @id @default(autoincrement())
  type                    IncidentInfoType
  name                    String
  incidentReason                Incident[]               @relation(name: "Reason")
  incidentSolution              Incident[]               @relation(name: "Solution")
  incidentName            IncidentName[]
}

enum IncidentInfoType {
  Reason
  Solution
}

model ProgramTechRate {
  id                      Int                      @id @default(autoincrement())
  carWashPos                    CarWashPos                     @relation(fields: [carWashPosId], references: [id])
  carWashPosId                  Int
  carWashDeviceProgramsType      CarWashDeviceProgramsType   @relation(fields: [carWashDeviceProgramsTypeId], references: [id])
  carWashDeviceProgramsTypeId    Int
  literRate                      Int?
  concentration                  Int?
}

model Warehouse {
  id                      Int                      @id @default(autoincrement())
  name                    String
  location                String
  manager                 User?                    @relation(name: "Manager", fields: [managerId], references: [id])
  managerId               Int?
  pos                     Pos?                      @relation(fields: [posId], references: [id])
  posId                   Int?
  createdBy               User                     @relation(name: "CreatedByUser", fields: [createdById], references: [id])
  createdById             Int
  updateBy                User                     @relation(name: "UpdateByUser", fields: [updateById], references: [id])
  updateById              Int
  createdAt               DateTime
  updatedAt               DateTime
  inventoryItems          InventoryItem[]
  warehouseDocuments      WarehouseDocument[]
}

model Nomenclature {
  id                      Int                      @id @default(autoincrement())
  name                    String
  sku                     String
  organization            Organization             @relation(fields: [organizationId], references: [id])
  organizationId          Int
  category                Category                 @relation(fields: [categoryId], references: [id])
  categoryId              Int
  supplier                Supplier?                  @relation(fields: [supplierId], references: [id])
  supplierId              Int?
  measurement             MeasurementNomenclature?
  image                   String?
  createdAt               DateTime
  createdBy               User                      @relation(name: "CreatedByUser", fields: [createdById], references: [id])
  createdById             Int
  updateBy                User                     @relation(name: "UpdateByUser", fields: [updateById], references: [id])
  updateById              Int
  updatedAt               DateTime
  inventoryItems          InventoryItem[]
  warehouseDocumentDetails      WarehouseDocumentDetail[]
}

enum MeasurementNomenclature {
  PIECE
  KILOGRAM
  LITER
  METER
}

model InventoryItem {
  id                      Int                      @id @default(autoincrement())
  nomenclature            Nomenclature             @relation(fields: [nomenclatureId], references: [id])
  nomenclatureId          Int
  quantity                Int
  warehouse               Warehouse                 @relation(fields: [warehouseId], references: [id])
  warehouseId             Int
}

model Category {
  id                      Int                      @id @default(autoincrement())
  name                    String
  description             String?
  ownerCategoryId         Int?
  ownerCategory           Category?                 @relation("OwnerCategory", fields: [ownerCategoryId], references: [id])
  preOwnerCategory        Category[]                 @relation("OwnerCategory")
  nomenclatures           Nomenclature[]
}

model Supplier {
  id                      Int                      @id @default(autoincrement())
  name                    String
  contact                 String
  nomenclatures          Nomenclature[]
}

model WarehouseDocument {
  id                      Int                      @id @default(autoincrement())
  name                    String
  warehouseDocumentType   WarehouseDocumentType
  warehouse               Warehouse?                 @relation(fields: [warehouseId], references: [id])
  warehouseId             Int?
  responsible             User?                      @relation(name: "responsibleUser", fields: [responsibleId], references: [id])
  responsibleId           Int?
  status                  WarehouseDocumentStatus?
  carryingAt              DateTime
  createdAt               DateTime
  updatedAt               DateTime
  createdBy               User                      @relation(name: "CreatedByUser", fields: [createdById], references: [id])
  createdById             Int
  updateBy                User                      @relation(name: "UpdateByUser", fields: [updateById], references: [id])
  updateById              Int
  warehouseDocumentDetails      WarehouseDocumentDetail[]
}

enum WarehouseDocumentStatus {
  CREATED
  SAVED
  SENT
}

enum WarehouseDocumentType {
  WRITEOFF
  INVENTORY
  COMMISSIONING
  RECEIPT
  MOVING
}

model WarehouseDocumentDetail {
  id                      Int                      @id @default(autoincrement())
  warehouseDocument       WarehouseDocument        @relation(fields: [warehouseDocumentId], references: [id])
  warehouseDocumentId     Int
  nomenclature            Nomenclature             @relation(fields: [nomenclatureId], references: [id])
  nomenclatureId          Int
  quantity                Int
  comment                 String?
  metaData                Json?
}

model CashCollection {
  id                        Int                      @id @default(autoincrement())
  oldCashCollectionDate     DateTime?
  cashCollectionDate        DateTime
  sendAt                    DateTime?
  status                    StatusCashCollection
  sumFact                   Int?
  pos                       Pos?                      @relation(fields: [posId], references: [id])
  posId                     Int?
  shortage                  Int?
  sumCard                   Int?
  countCar                  Int?
  averageCheck              Int?
  virtualSum                Int?
  createdAt                 DateTime
  updatedAt                 DateTime
  createdBy                 User                      @relation(name: "CreatedByUser", fields: [createdById], references: [id])
  createdById               Int
  updatedBy                 User                      @relation(name: "UpdateByUser", fields: [updatedById], references: [id])
  updatedById               Int
  cashCollectionDeviceTypes CashCollectionDeviceType[]
  cashCollectionDevices     CashCollectionDevice[]
}

enum StatusCashCollection {
  CREATED
  SAVED
  SENT
}

model CashCollectionDeviceType {
  id                      Int                      @id @default(autoincrement())
  cashCollection          CashCollection?          @relation(fields: [cashCollectionId], references: [id])
  cashCollectionId        Int?
  carWashDeviceType       CarWashDeviceType?       @relation(fields: [carWashDeviceTypeId], references: [id])
  carWashDeviceTypeId     Int?
  sumFact                 Int
  sumCoin                 Int
  sumPaper                Int
  shortage                Int
  virtualSum              Int
}

model CashCollectionDevice {
  id                      Int                      @id @default(autoincrement())
  cashCollection          CashCollection?          @relation(fields: [cashCollectionId], references: [id])
  cashCollectionId        Int?
  carWashDevice           CarWashDevice?           @relation(fields: [carWashDeviceId], references: [id])
  carWashDeviceId         Int?
  oldTookMoneyTime        DateTime
  tookMoneyTime           DateTime
  sum                     Int
  sumCoin                 Int
  sumPaper                Int
  sumCard                 Int
  carCount                Int
  virtualSum              Int
}

enum StatusUser {
  ACTIVE
  BLOCKED
  DELETED
}

enum PositionUser {
  Owner
  Operator
}

enum StatusOrganization {
  VERIFICATE
  PENDING
  ACTIVE
  BLOCKED
  DELETED
}

enum StatusPos {
  VERIFICATE
  ACTIVE
  OFFLINE
  DELETED
}

enum CarWashPosType {
  SelfService
  Portal
  SelfServiceAndPortal
}

enum TypeOrganization {
  LegalEntity
  IndividualEntrepreneur
}

enum CurrencyType {
  CASH
  CASHLESS
  VIRTUAL
}

enum CurrencyView {
  COIN
  PAPER
}

enum PermissionAction {
  manage
  create
  update
  delete
  read
}

enum StatusDeviceDataRaw {
  NEW
  PENDING
  DONE
}
